{"ast":null,"code":"const API_BASE_URL = 'http://localhost:9000/api'; // Include /api in the base URL\n\n// Helper function to handle API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n    console.log('Using token:', token);\n  } else {\n    console.log('No token found in localStorage');\n  }\n  try {\n    console.log(`Making ${options.method || 'GET'} request to ${API_BASE_URL}${endpoint}`);\n    console.log('Request headers:', headers);\n    if (options.body) {\n      console.log('Request body:', options.body);\n    }\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers,\n      body: options.body ? JSON.stringify(options.body) : undefined\n    });\n    const data = await response.json();\n    console.log(`Response from ${endpoint}:`, {\n      status: response.status,\n      data\n    });\n    if (!response.ok) {\n      throw new Error(data.error || `Request failed with status ${response.status}`);\n    }\n    return data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n// Auth API\nexport const authAPI = {\n  login: async (email, password) => {\n    const response = await apiRequest('/auth/login', {\n      method: 'POST',\n      body: {\n        email,\n        password\n      }\n    });\n    // The backend returns the token directly as a string\n    // Make sure we're not trying to access .token if it's already the token\n    const token = typeof response === 'string' ? response : response.token;\n    return {\n      token,\n      user: {\n        email\n      }\n    };\n  },\n  register: async (email, password) => {\n    const response = await apiRequest('/auth/register', {\n      method: 'POST',\n      body: {\n        email,\n        password\n      }\n    });\n    // The backend returns the token directly\n    return {\n      token: response,\n      user: {\n        email\n      }\n    };\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\n\n// Thoughts API\nexport const thoughtsAPI = {\n  getThoughts: async () => {\n    const response = await apiRequest('/thoughts');\n    // The backend returns thoughts in the data field\n    return Array.isArray(response) ? response : [];\n  },\n  createThought: async content => {\n    const response = await apiRequest('/thoughts', {\n      method: 'POST',\n      body: {\n        content\n      }\n    });\n    return response;\n  },\n  deleteThought: async id => {\n    await apiRequest(`/thoughts/${id}`, {\n      method: 'DELETE'\n    });\n    return id; // Return the deleted thought id\n  }\n};","map":{"version":3,"names":["API_BASE_URL","apiRequest","endpoint","options","token","localStorage","getItem","headers","console","log","method","body","response","fetch","JSON","stringify","undefined","data","json","status","ok","Error","error","authAPI","login","email","password","user","register","getCurrentUser","parse","logout","removeItem","thoughtsAPI","getThoughts","Array","isArray","createThought","content","deleteThought","id"],"sources":["/Users/tanvir/src/thoughts/thoughts-frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:9000/api'; // Include /api in the base URL\n\n// Helper function to handle API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  \n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers,\n  };\n\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n    console.log('Using token:', token);\n  } else {\n    console.log('No token found in localStorage');\n  }\n\n  try {\n    console.log(`Making ${options.method || 'GET'} request to ${API_BASE_URL}${endpoint}`);\n    console.log('Request headers:', headers);\n    if (options.body) {\n      console.log('Request body:', options.body);\n    }\n\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers,\n      body: options.body ? JSON.stringify(options.body) : undefined,\n    });\n\n    const data = await response.json();\n    console.log(`Response from ${endpoint}:`, { status: response.status, data });\n\n    if (!response.ok) {\n      throw new Error(data.error || `Request failed with status ${response.status}`);\n    }\n\n    return data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n// Auth API\nexport const authAPI = {\n  login: async (email, password) => {\n    const response = await apiRequest('/auth/login', {\n      method: 'POST',\n      body: { email, password },\n    });\n    // The backend returns the token directly as a string\n    // Make sure we're not trying to access .token if it's already the token\n    const token = typeof response === 'string' ? response : response.token;\n    return {\n      token,\n      user: { email }\n    };\n  },\n\n  register: async (email, password) => {\n    const response = await apiRequest('/auth/register', {\n      method: 'POST',\n      body: { email, password },\n    });\n    // The backend returns the token directly\n    return {\n      token: response,\n      user: { email }\n    };\n  },\n\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n};\n\n// Thoughts API\nexport const thoughtsAPI = {\n  getThoughts: async () => {\n    const response = await apiRequest('/thoughts');\n    // The backend returns thoughts in the data field\n    return Array.isArray(response) ? response : [];\n  },\n\n  createThought: async (content) => {\n    const response = await apiRequest('/thoughts', {\n      method: 'POST',\n      body: { content },\n    });\n    return response;\n  },\n\n  deleteThought: async (id) => {\n    await apiRequest(`/thoughts/${id}`, {\n      method: 'DELETE',\n    });\n    return id; // Return the deleted thought id\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}