{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8080/api'; // Include /api in the base URL\n\n// Helper function to handle API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n    console.log('Using token:', token);\n  } else {\n    console.log('No token found in localStorage');\n  }\n  try {\n    var _data3;\n    console.log(`Making ${options.method || 'GET'} request to ${API_BASE_URL}${endpoint}`);\n    console.log('Request headers:', headers);\n    if (options.body) {\n      console.log('Request body:', options.body);\n    }\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers,\n      body: options.body ? JSON.stringify(options.body) : undefined\n    });\n    let data;\n    try {\n      data = await response.json();\n      console.log(`Response from ${endpoint}:`, {\n        status: response.status,\n        data\n      });\n    } catch (jsonError) {\n      console.error('Error parsing JSON response:', jsonError);\n      throw new Error('Invalid response from server');\n    }\n    if (!response.ok) {\n      var _data, _data2;\n      // If token is invalid or expired, clear it\n      if (response.status === 401) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n\n        // Only redirect if we're not already on the login page\n        if (!window.location.pathname.includes('/login')) {\n          const redirectUrl = `/login?from=${encodeURIComponent(window.location.pathname)}`;\n          window.location.href = redirectUrl;\n        }\n      }\n      const errorMessage = ((_data = data) === null || _data === void 0 ? void 0 : _data.message) || ((_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.error) || `Request failed with status ${response.status}`;\n      throw new Error(errorMessage);\n    }\n\n    // Return the data property if it exists, otherwise return the whole response\n    return ((_data3 = data) === null || _data3 === void 0 ? void 0 : _data3.data) !== undefined ? data.data : data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n// Auth API\nexport const authAPI = {\n  login: async (email, password) => {\n    try {\n      // First, make the login request to get the token\n      const loginResponse = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!loginResponse.ok) {\n        const errorData = await loginResponse.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Login failed');\n      }\n      const {\n        token\n      } = await loginResponse.json();\n      if (!token) {\n        throw new Error('No token received from server');\n      }\n\n      // Store the token\n      localStorage.setItem('token', token);\n\n      // Now fetch the user's profile\n      const userResponse = await fetch(`${API_BASE_URL}/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!userResponse.ok) {\n        throw new Error('Failed to fetch user profile');\n      }\n      const user = await userResponse.json();\n\n      // Store user data\n      localStorage.setItem('user', JSON.stringify(user));\n      return {\n        token,\n        user\n      };\n    } catch (error) {\n      console.error('Login failed:', error);\n      // Clean up on error\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      throw error;\n    }\n  },\n  register: async (email, password) => {\n    const response = await apiRequest('/auth/register', {\n      method: 'POST',\n      body: {\n        email,\n        password\n      }\n    });\n    // The backend returns the token directly as a string\n    const token = typeof response === 'string' ? response : response.token;\n    return {\n      token,\n      user: {\n        email\n      }\n    };\n  },\n  getCurrentUser: async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return null;\n    }\n\n    // Try to get user from localStorage first\n    const cachedUser = localStorage.getItem('user');\n    if (cachedUser) {\n      try {\n        return JSON.parse(cachedUser);\n      } catch (e) {\n        console.error('Error parsing cached user:', e);\n      }\n    }\n    try {\n      // Fetch fresh user data from the server\n      const response = await fetch(`${API_BASE_URL}/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch user profile');\n      }\n      const user = await response.json();\n\n      // Update the cached user data\n      if (user) {\n        localStorage.setItem('user', JSON.stringify(user));\n      }\n      return user;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      // If there's an error (like 401), clear the invalid token\n      if (error.message.includes('401') || error.message.includes('token')) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n      return null;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\n\n// Thoughts API\nexport const thoughtsAPI = {\n  getThoughts: async () => {\n    const response = await apiRequest('/thoughts');\n    // The backend returns thoughts in the data field\n    return Array.isArray(response) ? response : [];\n  },\n  createThought: async content => {\n    const response = await apiRequest('/thoughts', {\n      method: 'POST',\n      body: {\n        content\n      }\n    });\n    return response;\n  },\n  deleteThought: async id => {\n    await apiRequest(`/thoughts/${id}`, {\n      method: 'DELETE'\n    });\n    return id; // Return the deleted thought id\n  }\n};","map":{"version":3,"names":["API_BASE_URL","apiRequest","endpoint","options","token","localStorage","getItem","headers","console","log","_data3","method","body","response","fetch","JSON","stringify","undefined","data","json","status","jsonError","error","Error","ok","_data","_data2","removeItem","window","location","pathname","includes","redirectUrl","encodeURIComponent","href","errorMessage","message","authAPI","login","email","password","loginResponse","errorData","catch","setItem","userResponse","user","register","getCurrentUser","cachedUser","parse","e","logout","thoughtsAPI","getThoughts","Array","isArray","createThought","content","deleteThought","id"],"sources":["/Users/tanvir/src/thoughts/thoughts-frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080/api'; // Include /api in the base URL\n\n// Helper function to handle API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  \n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers,\n  };\n\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n    console.log('Using token:', token);\n  } else {\n    console.log('No token found in localStorage');\n  }\n\n  try {\n    console.log(`Making ${options.method || 'GET'} request to ${API_BASE_URL}${endpoint}`);\n    console.log('Request headers:', headers);\n    if (options.body) {\n      console.log('Request body:', options.body);\n    }\n\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers,\n      body: options.body ? JSON.stringify(options.body) : undefined,\n    });\n\n    let data;\n    try {\n      data = await response.json();\n      console.log(`Response from ${endpoint}:`, { status: response.status, data });\n    } catch (jsonError) {\n      console.error('Error parsing JSON response:', jsonError);\n      throw new Error('Invalid response from server');\n    }\n\n    if (!response.ok) {\n      // If token is invalid or expired, clear it\n      if (response.status === 401) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        \n        // Only redirect if we're not already on the login page\n        if (!window.location.pathname.includes('/login')) {\n          const redirectUrl = `/login?from=${encodeURIComponent(window.location.pathname)}`;\n          window.location.href = redirectUrl;\n        }\n      }\n      \n      const errorMessage = data?.message || data?.error || `Request failed with status ${response.status}`;\n      throw new Error(errorMessage);\n    }\n\n    // Return the data property if it exists, otherwise return the whole response\n    return data?.data !== undefined ? data.data : data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n// Auth API\nexport const authAPI = {\n  login: async (email, password) => {\n    try {\n      // First, make the login request to get the token\n      const loginResponse = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!loginResponse.ok) {\n        const errorData = await loginResponse.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Login failed');\n      }\n\n      const { token } = await loginResponse.json();\n      \n      if (!token) {\n        throw new Error('No token received from server');\n      }\n      \n      // Store the token\n      localStorage.setItem('token', token);\n      \n      // Now fetch the user's profile\n      const userResponse = await fetch(`${API_BASE_URL}/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!userResponse.ok) {\n        throw new Error('Failed to fetch user profile');\n      }\n      \n      const user = await userResponse.json();\n      \n      // Store user data\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      return { token, user };\n    } catch (error) {\n      console.error('Login failed:', error);\n      // Clean up on error\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      throw error;\n    }\n  },\n\n  register: async (email, password) => {\n    const response = await apiRequest('/auth/register', {\n      method: 'POST',\n      body: { email, password },\n    });\n    // The backend returns the token directly as a string\n    const token = typeof response === 'string' ? response : response.token;\n    return {\n      token,\n      user: { email }\n    };\n  },\n\n  getCurrentUser: async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return null;\n    }\n    \n    // Try to get user from localStorage first\n    const cachedUser = localStorage.getItem('user');\n    if (cachedUser) {\n      try {\n        return JSON.parse(cachedUser);\n      } catch (e) {\n        console.error('Error parsing cached user:', e);\n      }\n    }\n    \n    try {\n      // Fetch fresh user data from the server\n      const response = await fetch(`${API_BASE_URL}/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch user profile');\n      }\n      \n      const user = await response.json();\n      \n      // Update the cached user data\n      if (user) {\n        localStorage.setItem('user', JSON.stringify(user));\n      }\n      \n      return user;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      // If there's an error (like 401), clear the invalid token\n      if (error.message.includes('401') || error.message.includes('token')) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n      return null;\n    }\n  },\n\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n};\n\n// Thoughts API\nexport const thoughtsAPI = {\n  getThoughts: async () => {\n    const response = await apiRequest('/thoughts');\n    // The backend returns thoughts in the data field\n    return Array.isArray(response) ? response : [];\n  },\n\n  createThought: async (content) => {\n    const response = await apiRequest('/thoughts', {\n      method: 'POST',\n      body: { content },\n    });\n    return response;\n  },\n\n  deleteThought: async (id) => {\n    await apiRequest(`/thoughts/${id}`, {\n      method: 'DELETE',\n    });\n    return id; // Return the deleted thought id\n  },\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B,CAAC,CAAC;;AAElD;AACA,MAAMC,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACnD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,MAAMC,OAAO,GAAG;IACd,cAAc,EAAE,kBAAkB;IAClC,GAAGJ,OAAO,CAACI;EACb,CAAC;EAED,IAAIH,KAAK,EAAE;IACTG,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;IAC5CI,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEL,KAAK,CAAC;EACpC,CAAC,MAAM;IACLI,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAC/C;EAEA,IAAI;IAAA,IAAAC,MAAA;IACFF,OAAO,CAACC,GAAG,CAAC,UAAUN,OAAO,CAACQ,MAAM,IAAI,KAAK,eAAeX,YAAY,GAAGE,QAAQ,EAAE,CAAC;IACtFM,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,OAAO,CAAC;IACxC,IAAIJ,OAAO,CAACS,IAAI,EAAE;MAChBJ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEN,OAAO,CAACS,IAAI,CAAC;IAC5C;IAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,YAAY,GAAGE,QAAQ,EAAE,EAAE;MACzD,GAAGC,OAAO;MACVI,OAAO;MACPK,IAAI,EAAET,OAAO,CAACS,IAAI,GAAGG,IAAI,CAACC,SAAS,CAACb,OAAO,CAACS,IAAI,CAAC,GAAGK;IACtD,CAAC,CAAC;IAEF,IAAIC,IAAI;IACR,IAAI;MACFA,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAC5BX,OAAO,CAACC,GAAG,CAAC,iBAAiBP,QAAQ,GAAG,EAAE;QAAEkB,MAAM,EAAEP,QAAQ,CAACO,MAAM;QAAEF;MAAK,CAAC,CAAC;IAC9E,CAAC,CAAC,OAAOG,SAAS,EAAE;MAClBb,OAAO,CAACc,KAAK,CAAC,8BAA8B,EAAED,SAAS,CAAC;MACxD,MAAM,IAAIE,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEA,IAAI,CAACV,QAAQ,CAACW,EAAE,EAAE;MAAA,IAAAC,KAAA,EAAAC,MAAA;MAChB;MACA,IAAIb,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;QAC3Bf,YAAY,CAACsB,UAAU,CAAC,OAAO,CAAC;QAChCtB,YAAY,CAACsB,UAAU,CAAC,MAAM,CAAC;;QAE/B;QACA,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;UAChD,MAAMC,WAAW,GAAG,eAAeC,kBAAkB,CAACL,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAAC,EAAE;UACjFF,MAAM,CAACC,QAAQ,CAACK,IAAI,GAAGF,WAAW;QACpC;MACF;MAEA,MAAMG,YAAY,GAAG,EAAAV,KAAA,GAAAP,IAAI,cAAAO,KAAA,uBAAJA,KAAA,CAAMW,OAAO,OAAAV,MAAA,GAAIR,IAAI,cAAAQ,MAAA,uBAAJA,MAAA,CAAMJ,KAAK,KAAI,8BAA8BT,QAAQ,CAACO,MAAM,EAAE;MACpG,MAAM,IAAIG,KAAK,CAACY,YAAY,CAAC;IAC/B;;IAEA;IACA,OAAO,EAAAzB,MAAA,GAAAQ,IAAI,cAAAR,MAAA,uBAAJA,MAAA,CAAMQ,IAAI,MAAKD,SAAS,GAAGC,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpD,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMe,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,IAAI;MACF;MACA,MAAMC,aAAa,GAAG,MAAM3B,KAAK,CAAC,GAAGd,YAAY,aAAa,EAAE;QAC9DW,MAAM,EAAE,MAAM;QACdJ,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDK,IAAI,EAAEG,IAAI,CAACC,SAAS,CAAC;UAAEuB,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,IAAI,CAACC,aAAa,CAACjB,EAAE,EAAE;QACrB,MAAMkB,SAAS,GAAG,MAAMD,aAAa,CAACtB,IAAI,CAAC,CAAC,CAACwB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9D,MAAM,IAAIpB,KAAK,CAACmB,SAAS,CAACN,OAAO,IAAI,cAAc,CAAC;MACtD;MAEA,MAAM;QAAEhC;MAAM,CAAC,GAAG,MAAMqC,aAAa,CAACtB,IAAI,CAAC,CAAC;MAE5C,IAAI,CAACf,KAAK,EAAE;QACV,MAAM,IAAImB,KAAK,CAAC,+BAA+B,CAAC;MAClD;;MAEA;MACAlB,YAAY,CAACuC,OAAO,CAAC,OAAO,EAAExC,KAAK,CAAC;;MAEpC;MACA,MAAMyC,YAAY,GAAG,MAAM/B,KAAK,CAAC,GAAGd,YAAY,KAAK,EAAE;QACrDO,OAAO,EAAE;UACP,eAAe,EAAE,UAAUH,KAAK,EAAE;UAClC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAI,CAACyC,YAAY,CAACrB,EAAE,EAAE;QACpB,MAAM,IAAID,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEA,MAAMuB,IAAI,GAAG,MAAMD,YAAY,CAAC1B,IAAI,CAAC,CAAC;;MAEtC;MACAd,YAAY,CAACuC,OAAO,CAAC,MAAM,EAAE7B,IAAI,CAACC,SAAS,CAAC8B,IAAI,CAAC,CAAC;MAElD,OAAO;QAAE1C,KAAK;QAAE0C;MAAK,CAAC;IACxB,CAAC,CAAC,OAAOxB,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC;MACAjB,YAAY,CAACsB,UAAU,CAAC,OAAO,CAAC;MAChCtB,YAAY,CAACsB,UAAU,CAAC,MAAM,CAAC;MAC/B,MAAML,KAAK;IACb;EACF,CAAC;EAEDyB,QAAQ,EAAE,MAAAA,CAAOR,KAAK,EAAEC,QAAQ,KAAK;IACnC,MAAM3B,QAAQ,GAAG,MAAMZ,UAAU,CAAC,gBAAgB,EAAE;MAClDU,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE;QAAE2B,KAAK;QAAEC;MAAS;IAC1B,CAAC,CAAC;IACF;IACA,MAAMpC,KAAK,GAAG,OAAOS,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAGA,QAAQ,CAACT,KAAK;IACtE,OAAO;MACLA,KAAK;MACL0C,IAAI,EAAE;QAAEP;MAAM;IAChB,CAAC;EACH,CAAC;EAEDS,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,MAAM5C,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACV,OAAO,IAAI;IACb;;IAEA;IACA,MAAM6C,UAAU,GAAG5C,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAI2C,UAAU,EAAE;MACd,IAAI;QACF,OAAOlC,IAAI,CAACmC,KAAK,CAACD,UAAU,CAAC;MAC/B,CAAC,CAAC,OAAOE,CAAC,EAAE;QACV3C,OAAO,CAACc,KAAK,CAAC,4BAA4B,EAAE6B,CAAC,CAAC;MAChD;IACF;IAEA,IAAI;MACF;MACA,MAAMtC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,YAAY,KAAK,EAAE;QACjDO,OAAO,EAAE;UACP,eAAe,EAAE,UAAUH,KAAK,EAAE;UAClC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAI,CAACS,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAM,IAAID,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEA,MAAMuB,IAAI,GAAG,MAAMjC,QAAQ,CAACM,IAAI,CAAC,CAAC;;MAElC;MACA,IAAI2B,IAAI,EAAE;QACRzC,YAAY,CAACuC,OAAO,CAAC,MAAM,EAAE7B,IAAI,CAACC,SAAS,CAAC8B,IAAI,CAAC,CAAC;MACpD;MAEA,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOxB,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD;MACA,IAAIA,KAAK,CAACc,OAAO,CAACL,QAAQ,CAAC,KAAK,CAAC,IAAIT,KAAK,CAACc,OAAO,CAACL,QAAQ,CAAC,OAAO,CAAC,EAAE;QACpE1B,YAAY,CAACsB,UAAU,CAAC,OAAO,CAAC;QAChCtB,YAAY,CAACsB,UAAU,CAAC,MAAM,CAAC;MACjC;MACA,OAAO,IAAI;IACb;EACF,CAAC;EAEDyB,MAAM,EAAEA,CAAA,KAAM;IACZ/C,YAAY,CAACsB,UAAU,CAAC,OAAO,CAAC;IAChCtB,YAAY,CAACsB,UAAU,CAAC,MAAM,CAAC;EACjC;AACF,CAAC;;AAED;AACA,OAAO,MAAM0B,WAAW,GAAG;EACzBC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAMzC,QAAQ,GAAG,MAAMZ,UAAU,CAAC,WAAW,CAAC;IAC9C;IACA,OAAOsD,KAAK,CAACC,OAAO,CAAC3C,QAAQ,CAAC,GAAGA,QAAQ,GAAG,EAAE;EAChD,CAAC;EAED4C,aAAa,EAAE,MAAOC,OAAO,IAAK;IAChC,MAAM7C,QAAQ,GAAG,MAAMZ,UAAU,CAAC,WAAW,EAAE;MAC7CU,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE;QAAE8C;MAAQ;IAClB,CAAC,CAAC;IACF,OAAO7C,QAAQ;EACjB,CAAC;EAED8C,aAAa,EAAE,MAAOC,EAAE,IAAK;IAC3B,MAAM3D,UAAU,CAAC,aAAa2D,EAAE,EAAE,EAAE;MAClCjD,MAAM,EAAE;IACV,CAAC,CAAC;IACF,OAAOiD,EAAE,CAAC,CAAC;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}