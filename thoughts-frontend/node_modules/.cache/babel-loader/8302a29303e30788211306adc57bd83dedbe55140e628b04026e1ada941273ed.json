{"ast":null,"code":"const API_BASE_URL = 'http://localhost:9000/api';\n\n// Helper function to handle API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers,\n      body: options.body ? JSON.stringify(options.body) : undefined\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Something went wrong');\n    }\n    return data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n// Auth API\nexport const authAPI = {\n  login: async (email, password) => {\n    return apiRequest('/login', {\n      method: 'POST',\n      body: {\n        email,\n        password\n      }\n    });\n  },\n  register: async (email, password) => {\n    return apiRequest('/register', {\n      method: 'POST',\n      body: {\n        email,\n        password\n      }\n    });\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\n\n// Thoughts API\nexport const thoughtsAPI = {\n  getThoughts: async () => {\n    return apiRequest('/thoughts');\n  },\n  createThought: async content => {\n    return apiRequest('/thoughts', {\n      method: 'POST',\n      body: {\n        content\n      }\n    });\n  },\n  deleteThought: async id => {\n    return apiRequest(`/thoughts/${id}`, {\n      method: 'DELETE'\n    });\n  }\n};","map":{"version":3,"names":["API_BASE_URL","apiRequest","endpoint","options","token","localStorage","getItem","headers","response","fetch","body","JSON","stringify","undefined","data","json","ok","Error","error","console","authAPI","login","email","password","method","register","getCurrentUser","user","parse","logout","removeItem","thoughtsAPI","getThoughts","createThought","content","deleteThought","id"],"sources":["/Users/tanvir/src/thoughts/thoughts-frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:9000/api';\n\n// Helper function to handle API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  \n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers,\n  };\n\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers,\n      body: options.body ? JSON.stringify(options.body) : undefined,\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.error || 'Something went wrong');\n    }\n\n    return data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n// Auth API\nexport const authAPI = {\n  login: async (email, password) => {\n    return apiRequest('/login', {\n      method: 'POST',\n      body: { email, password },\n    });\n  },\n\n  register: async (email, password) => {\n    return apiRequest('/register', {\n      method: 'POST',\n      body: { email, password },\n    });\n  },\n\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n};\n\n// Thoughts API\nexport const thoughtsAPI = {\n  getThoughts: async () => {\n    return apiRequest('/thoughts');\n  },\n\n  createThought: async (content) => {\n    return apiRequest('/thoughts', {\n      method: 'POST',\n      body: { content },\n    });\n  },\n\n  deleteThought: async (id) => {\n    return apiRequest(`/thoughts/${id}`, {\n      method: 'DELETE',\n    });\n  },\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACnD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,MAAMC,OAAO,GAAG;IACd,cAAc,EAAE,kBAAkB;IAClC,GAAGJ,OAAO,CAACI;EACb,CAAC;EAED,IAAIH,KAAK,EAAE;IACTG,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EAC9C;EAEA,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,YAAY,GAAGE,QAAQ,EAAE,EAAE;MACzD,GAAGC,OAAO;MACVI,OAAO;MACPG,IAAI,EAAEP,OAAO,CAACO,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACT,OAAO,CAACO,IAAI,CAAC,GAAGG;IACtD,CAAC,CAAC;IAEF,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAElC,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,sBAAsB,CAAC;IACvD;IAEA,OAAOJ,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,OAAOtB,UAAU,CAAC,QAAQ,EAAE;MAC1BuB,MAAM,EAAE,MAAM;MACdd,IAAI,EAAE;QAAEY,KAAK;QAAEC;MAAS;IAC1B,CAAC,CAAC;EACJ,CAAC;EAEDE,QAAQ,EAAE,MAAAA,CAAOH,KAAK,EAAEC,QAAQ,KAAK;IACnC,OAAOtB,UAAU,CAAC,WAAW,EAAE;MAC7BuB,MAAM,EAAE,MAAM;MACdd,IAAI,EAAE;QAAEY,KAAK;QAAEC;MAAS;IAC1B,CAAC,CAAC;EACJ,CAAC;EAEDG,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAMC,IAAI,GAAGtB,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACzC,OAAOqB,IAAI,GAAGhB,IAAI,CAACiB,KAAK,CAACD,IAAI,CAAC,GAAG,IAAI;EACvC,CAAC;EAEDE,MAAM,EAAEA,CAAA,KAAM;IACZxB,YAAY,CAACyB,UAAU,CAAC,OAAO,CAAC;IAChCzB,YAAY,CAACyB,UAAU,CAAC,MAAM,CAAC;EACjC;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG;EACzBC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,OAAO/B,UAAU,CAAC,WAAW,CAAC;EAChC,CAAC;EAEDgC,aAAa,EAAE,MAAOC,OAAO,IAAK;IAChC,OAAOjC,UAAU,CAAC,WAAW,EAAE;MAC7BuB,MAAM,EAAE,MAAM;MACdd,IAAI,EAAE;QAAEwB;MAAQ;IAClB,CAAC,CAAC;EACJ,CAAC;EAEDC,aAAa,EAAE,MAAOC,EAAE,IAAK;IAC3B,OAAOnC,UAAU,CAAC,aAAamC,EAAE,EAAE,EAAE;MACnCZ,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}