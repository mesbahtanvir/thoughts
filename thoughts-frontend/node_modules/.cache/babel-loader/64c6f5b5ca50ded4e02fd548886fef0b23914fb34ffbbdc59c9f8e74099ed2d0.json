{"ast":null,"code":"const API_BASE_URL = 'http://localhost:9000';\n\n// Helper function to handle API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n    console.log('Using token:', token);\n  } else {\n    console.log('No token found in localStorage');\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers,\n      body: options.body ? JSON.stringify(options.body) : undefined\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Something went wrong');\n    }\n    return data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n// Auth API\nexport const authAPI = {\n  login: async (email, password) => {\n    const response = await apiRequest('/auth/login', {\n      method: 'POST',\n      body: {\n        email,\n        password\n      }\n    });\n    // The backend returns the token directly\n    return {\n      token: response,\n      user: {\n        email\n      }\n    };\n  },\n  register: async (email, password) => {\n    const response = await apiRequest('/auth/register', {\n      method: 'POST',\n      body: {\n        email,\n        password\n      }\n    });\n    // The backend returns the token directly\n    return {\n      token: response,\n      user: {\n        email\n      }\n    };\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\n\n// Thoughts API\nexport const thoughtsAPI = {\n  getThoughts: async () => {\n    const response = await apiRequest('/thoughts');\n    // The backend returns thoughts in the data field\n    return Array.isArray(response) ? response : [];\n  },\n  createThought: async content => {\n    const response = await apiRequest('/thoughts', {\n      method: 'POST',\n      body: {\n        content\n      }\n    });\n    return response;\n  },\n  deleteThought: async id => {\n    await apiRequest(`/thoughts/${id}`, {\n      method: 'DELETE'\n    });\n    return id; // Return the deleted thought id\n  }\n};","map":{"version":3,"names":["API_BASE_URL","apiRequest","endpoint","options","token","localStorage","getItem","headers","console","log","response","fetch","body","JSON","stringify","undefined","data","json","ok","Error","error","authAPI","login","email","password","method","user","register","getCurrentUser","parse","logout","removeItem","thoughtsAPI","getThoughts","Array","isArray","createThought","content","deleteThought","id"],"sources":["/Users/tanvir/src/thoughts/thoughts-frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:9000';\n\n// Helper function to handle API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  \n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers,\n  };\n\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n    console.log('Using token:', token);\n  } else {\n    console.log('No token found in localStorage');\n  }\n\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers,\n      body: options.body ? JSON.stringify(options.body) : undefined,\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.error || 'Something went wrong');\n    }\n\n    return data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n// Auth API\nexport const authAPI = {\n  login: async (email, password) => {\n    const response = await apiRequest('/auth/login', {\n      method: 'POST',\n      body: { email, password },\n    });\n    // The backend returns the token directly\n    return {\n      token: response,\n      user: { email }\n    };\n  },\n\n  register: async (email, password) => {\n    const response = await apiRequest('/auth/register', {\n      method: 'POST',\n      body: { email, password },\n    });\n    // The backend returns the token directly\n    return {\n      token: response,\n      user: { email }\n    };\n  },\n\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n};\n\n// Thoughts API\nexport const thoughtsAPI = {\n  getThoughts: async () => {\n    const response = await apiRequest('/thoughts');\n    // The backend returns thoughts in the data field\n    return Array.isArray(response) ? response : [];\n  },\n\n  createThought: async (content) => {\n    const response = await apiRequest('/thoughts', {\n      method: 'POST',\n      body: { content },\n    });\n    return response;\n  },\n\n  deleteThought: async (id) => {\n    await apiRequest(`/thoughts/${id}`, {\n      method: 'DELETE',\n    });\n    return id; // Return the deleted thought id\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}